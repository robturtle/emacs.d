#+TITLE: Editing Utils

| Key     | Function                |
|---------+-------------------------|
| C-c j   | join to previous line   |
| C-c J   | join next line to here  |
| C-.     | set mark                |
| C-x C-. | return to previous mark |

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  ;; Vimmy alternatives to M-^ and C-u M-^
  (global-set-key (kbd "C-c j") 'join-line)
  (global-set-key (kbd "C-c J") (lambda () (interactive) (join-line 1)))

  (global-set-key (kbd "C-.") 'set-mark-command)
  (global-set-key (kbd "C-x C-.") 'pop-global-mark)
#+END_SRC

* base config
#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  ; inverse of fill-paragraph and fill-region
  (require-package 'unfill)

  ; version control not following symlinks
  (setq vc-follow-symlinks nil)

  (setq-default
   blink-cursor-interval 0.4 ; cursor blink faster
   bookmark-default-file (expand-file-name ".bookmarks.el" user-emacs-directory)
   buffers-menu-max-size 30
   case-fold-search t ; searching will ignore case
   column-number-mode t ; display column number in mode line
   delete-selection-mode t ; you type when searching, you replace the orginal context
   indent-tabs-mode nil ; never insert <tab> when indenting
   mouse-yank-at-point t ; click mouse middle to paste contents
   save-interprogram-paste-before-kill t ; external copy will save into kill-ring
   scroll-preserve-screen-position 'always
   set-mark-command-repeat-pop t
   show-trailing-whitespace t
   tooltip-delay 1.5
   truncate-lines nil
   truncate-partial-width-windows nil
   visible-bell nil
   )

  (global-auto-revert-mode)
  (setq global-auto-revert-non-file-buffers t
        auto-revert-verbose nil)

  (transient-mark-mode t)
#+END_SRC

* EVIL mode
Evil mode is stripped from the config for a long time because the key confliction
in many minor-modes. But it's still a very missing part of the editor.

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (require-package 'evil)
  (require-package 'evil-leader)

  (global-evil-leader-mode) ; should
  (evil-mode 1)

  (evil-leader/set-leader ",")

  ;; e as explorer
  (when (require 'ranger nil 'noerror)
    (evil-leader/set-key "e" 'ranger))
#+END_SRC

* parenthesis =C-M-p/n/u=
| C-M-u | backward up |
| C-M-p | backward    |
| C-M-n | forward     |

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  ; automatically insert close paren
  (when (fboundp 'electric-pair-mode)
    (electric-pair-mode))
  (when (eval-when-compile (version< "24.4" emacs-version))
    (electric-indent-mode 1))

  ; show parenthesis
  (show-paren-mode 1)
#+END_SRC

** fix backward to understand quotes, see http://bit.ly/h7mdIL
#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (defun backward-up-sexp (arg)
    "Jump up to the start of the ARG'th enclosing sexp."
    (interactive "p")
    (let ((ppss (syntax-ppss)))
      (cond ((elt ppss 3)
             (goto-char (elt ppss 8))
             (backward-up-sexp (1- arg)))
            ((backward-up-list arg)))))

  (global-set-key [remap backward-up-list] 'backward-up-sexp) ; C-M-u C-M-up
#+END_SRC

* whitespaces
#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (defun sanityinc/no-trailing-whitespace ()
    "Turn off display of trailing whitespace in this buffer."
    (setq show-trailing-whitespace nil))

  ;; But don't show trailing whitespace in SQLi, inf-ruby etc.
  (dolist (hook '(
                  special-mode-hook
                  eww-mode-hook
                  term-mode-hook
                  comint-mode-hook
                  compilation-mode-hook
                  twittering-mode-hook
                  minibuffer-setup-hook
                  ))
    (add-hook hook #'sanityinc/no-trailing-whitespace))

  (require-package 'whitespace-cleanup-mode)
  (global-set-key [remap just-one-space] 'cycle-spacing); M-space to ensure words separated just one space

  

  (defun kill-back-to-indentation ()
    "Kill from point back to the first non-whitespace character on the line"
    (interactive)
    (let ((prev-pos (point)))
          (back-to-indentation)
          (kill-region (point) prev-pos)))

  (global-set-key (kbd "C-M-<backspace>") 'kill-back-to-indentation)

  

  ;; auto deletet trailing whitespace in blank lines
  (require-package 'clean-aindent-mode)
  (require 'clean-aindent-mode)
  (add-hook 'prog-mode-hook 'clean-aindent-mode)

  ;; auto trimming whitespaces
  (require-package 'ws-butler)
  (ws-butler-global-mode)
#+END_SRC

* indentation
#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  ;; So I can auto adjust indentation in foreign files
  (require-package 'dtrt-indent)
  ;(add-hook 'prog-mode-hook 'dtrt-indent-mode)
#+END_SRC

* newline behaviour =C-o=
#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (when (eval-when-compile (string< "24.3.1" emacs-version))
    ;; https://github.com/purcell/emacs.d/issues/138
    (after-load 'subword
      (diminish 'subword-mode)))

  

  (defun sanityinc/open-line-with-reindent (n)
    "A version of `open-line' which reindents the start and end positions.
  If there is a fill prefix and/or a `left-margin', insert them
  on the new line if the line would have been blank.
  With arg N, insert N newlines."
    (interactive "*p")
    (let* ((do-fill-prefix (and fill-prefix (bolp)))
           (do-left-margin (and (bolp) (> (current-left-margin) 0)))
           (loc (point-marker))
           ;; Don't expand an abbrev before point.
           (abbrev-mode nil))
      (delete-horizontal-space t)
      (newline n)
      (indent-according-to-mode)
      (when (eolp)
        (delete-horizontal-space t))
      (goto-char loc)
      (while (> n 0)
        (cond ((bolp)
               (if do-left-margin (indent-to (current-left-margin)))
               (if do-fill-prefix (insert-and-inherit fill-prefix))))
        (forward-line 1)
        (setq n (1- n)))
      (goto-char loc)
      (end-of-line)
      (indent-according-to-mode)))

  (global-set-key (kbd "C-o") 'sanityinc/open-line-with-reindent)
#+END_SRC

* incremental selection =C-==
#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (require-package 'expand-region)
  (global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

* rectangle selection -- CUA =C-ENT=

- enter to cycle through 4 corners
- =M-n= to insert numbers

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (cua-selection-mode t) ; for rectangles, CUA is nice
#+END_SRC

* shift lines up/down =M-S-up= copy line =C-c y= =C-c Y=
#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (require-package 'move-dup)
  (global-set-key [M-up] 'md/move-lines-up)
  (global-set-key [M-down] 'md/move-lines-down)
  (global-set-key [M-S-up] 'md/move-lines-up)
  (global-set-key [M-S-down] 'md/move-lines-down)

  (global-set-key (kbd "C-c y") 'md/duplicate-down)
  (global-set-key (kbd "C-c Y") 'md/duplicate-up)
#+END_SRC

* multiple cursors
#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (require-package 'multiple-cursors)
  ;; multiple cursors
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-+") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

  ;; From active region to multiple cursors:
  (global-set-key (kbd "C-S-c C-S-r") 'set-rectangular-region-anchor)
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C-S-c C-S-e") 'mc/edit-ends-of-lines)
  (global-set-key (kbd "C-S-c C-S-a") 'mc/edit-beginnings-of-lines)

#+END_SRC
* undo-tree: =M-_= redo
#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (require-package 'undo-tree)
  (global-undo-tree-mode)
  (diminish 'undo-tree-mode)
#+END_SRC

* math symbol input

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (require-package 'xah-math-input)
  (require 'xah-math-input)
#+END_SRC

* toggle window spliting
In [[http://www.emacswiki.org/emacs/ToggleWindowSplit][the Emacs wiki]] there is a function to toggle window between vertical
and horizontal splitting.  This is useful especially when your screen
is too large that the =helm= always split your window horizontally.

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (defun toggle-frame-split ()
    "If the frame is split vertically, split it horizontally or vice versa.
  Assumes that the frame is only split into two."
    (interactive)
    (unless (= (length (window-list)) 2) (error "Can only toggle a frame split in two"))
    (let ((split-vertically-p (window-combined-p)))
      (delete-window) ; closes current window
      (if split-vertically-p
          (split-window-horizontally)
        (split-window-vertically)) ; gives us a split with the other window twice
      (switch-to-buffer nil))) ; restore the original window in this part of the frame

  (define-key ctl-x-4-map "t" 'toggle-frame-split)
#+END_SRC

* snippets
I don't want to repeat again and again that how important and life
changing this facility is.  In fact it's so good that make a programmer
lazier and forgetting lots of basic sentences when getting out of it.

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (require-package 'yasnippet)
  (require 'yasnippet)
  (yas-global-mode 1)

  ;;; select snippet using helm
  (defun shk-yas/helm-prompt (prompt choices &optional display-fn)
    "Use helm to select a snippet. Put this into `yas-prompt-functions.'"
    (interactive)
    (setq display-fn (or display-fn 'identity))
    (if (require 'helm-config)
        (let (tmpsource cands result rmap)
          (setq cands (mapcar (lambda (x) (funcall display-fn x)) choices))
          (setq rmap (mapcar (lambda (x) (cons (funcall display-fn x) x)) choices))
          (setq tmpsource
                (list
                 (cons 'name prompt)
                 (cons 'candidates cands)
                 '(action . (("Expand" . (lambda (selection) selection))))
                 ))
          (setq result (helm-other-buffer '(tmpsource) "*helm-select-yasnippet"))
          (if (null result)
              (signal 'quit "user quit!")
            (cdr (assoc result rmap))))
      nil))
  (add-to-list 'yas-prompt-functions 'shk-yas/helm-prompt)

  ;;; new shortcut
  (define-key yas-minor-mode-map [(tab)] nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "M-j") 'yas-expand)
#+END_SRC

** helper functions
*** Java
#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (defun yang/get-java-package ()
    (setq current-dir (file-name-directory (buffer-file-name)))
    (let ((dir-list '(
                      "src/main/java/"
                      "src/test/java"
                      "src/"
                      "test/"
                      )))
      (catch 'package
        (mapc
         (lambda (dir)
           (if (string-match-p dir current-dir)
               (throw 'package (replace-regexp-in-string "/" "."
                                (substring current-dir
                                           (+ (string-match dir current-dir)
                                              (length dir))
                                           -1)))
             ()
           ))
         dir-list)
        nil)
      ))
#+END_SRC

* auto completion - company
OK, I admitted that I have the tend to use the most latest
package. That will conflicts the former configuration about this emacs
configurations.

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (require-package 'company)

  (add-hook 'after-init-hook 'global-company-mode)
  (global-set-key [C-tab] 'company-complete)
  (setq-default company-idle-delay 0)

  

  (require-package 'pos-tip)
  (require-package 'company-quickhelp)
  (company-quickhelp-mode 1)

  

  ; all mode that company-mode should be off will go here
  ;(add-hook 'py-ipython-shell-mode-hook (lambda ()
  ;                                        (company-mode -1)
  ;                                        ))

#+END_SRC

* ace-jump - cursor navigating =C-;= =C-:=
Use ace-jump to control the exact move of the cursor
#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (require-package 'ace-jump-mode)
  (global-set-key (kbd "C-;") 'ace-jump-mode)
  (global-set-key (kbd "C-:") 'ace-jump-char-mode)
#+END_SRC
* window management - smart-window =C-x w=

| C-x w   | move         |
| C-x W   | buffer split |
| C-x M-w | file split   |
| C-x R   | rotate       |
| C-x 2   | below        |
| C-x 3   | right        |

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  ;; apply the above functions
  (require-package 'smart-window)
  (require 'smart-window)
  

  ;; use shift-arrow to move through windows
  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))
#+END_SRC
