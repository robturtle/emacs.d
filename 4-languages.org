#+title: Languages Support

* C/C++ common
Including CMake plugin and gdb settings.

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  ;;; CMake
  (require-package 'cmake-mode)
  (require-package 'cmake-font-lock)
  (require 'cmake-mode)
  (require 'cmake-font-lock)

  (add-auto-mode 'cmake-mode "CMakeLists\\.txt\\'" "\\.cmake\\'")

  (require-package 'cmake-project)
  (require 'cmake-project)

  ;;; TODO enter cmake-project-mode only in CMake project
  (add-hook 'c++-mode-hook 'cmake-project-mode)
  (add-hook 'c-mode-hook 'cmake-project-mode)
  ;(add-hook 'c-mode-common-hook 'ws-butler-mode)
  ;(add-hook 'c-mode-common-hook 'doxymacs-mode)

  
  ;;; gdb
  (setq-default
   gdb-many-windows t
   gdb-show-main t)

#+END_SRC

* Java

Java has a great supporting tool called =elcim= which extract the
backend of the Eclipse.  It provides project management, on the fly
error check and so on.

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (require-package 'emacs-eclim)
  (require 'eclim)
  (require 'eclimd)
;  (global-eclim-mode)

  

  ;; company setup
  (require 'company)
  (require 'company-emacs-eclim)
  (company-emacs-eclim-setup)

#+END_SRC

** flycheck integration
I want flycheck to show eclim-problems. I found [[https://github.com/kleewho/emacs-eclim/blob/flycheck/flycheck-eclim.el][this]] file to do this
job for me.  I put this into ~/.emacs.d/emacs-eclim... folder.

#+header: :tangle no
#+BEGIN_SRC emacs-lisp
  (when (and (require 'flycheck)
             (require 'flycheck-eclim))
    (flycheck-eclim-setup))
#+END_SRC

* Haskell

| Key   | Function                       |
|-------+--------------------------------|
| C-c h | query hoogle help at the point |

The editting utilities are provided by major mode:

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (require-package 'haskell-mode)

#+END_SRC

** Unicode representation
Emacs supports a fancy representation for Haskell keywords (e.g. an
unicode lambda symbol replaces the normal 'lambda' string). To turn it
on:

FIXME: Currently it seems not work with flycheck, I'll fix it later.

#+header: :tangle no
#+BEGIN_SRC emacs-lisp
  (add-hook 'haskell-mode-hook 'turn-on-haskell-unicode-input-method)

#+END_SRC

** Syntax check

*NOTE* this depends on [[file:3-sematics.org::*flycheck][flycheck]]. Make sure the flycheck is set up
properly.

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (when (and (maybe-require-package 'flycheck-haskell)
             (require-package 'flycheck-hdevtools))
    (after-load 'flycheck
                (add-hook 'haskell-mode-hook #'flycheck-haskell-setup)

                (defun sanityinc/flycheck-haskell-reconfigure ()
                  "Reconfigure flycheck haskell settings, e.g. after changing cabal file."
                  (interactive)
                  (unless (eq major-mode 'haskell-mode)
                    (error "Expected to be in haskell-mode"))
                  (flycheck-haskell-clear-config-cache)
                  (flycheck-haskell-configure)
                  (flycheck-mode -1)
                  (flycheck-mode))

                (defadvice haskell-mode-stylish-buffer (around skip-if-flycheck-errors activate)
                  "Don't run stylish-buffer if the buffer appears to have a syntax error.
  This isn't a hard guarantee, since flycheck might sometimes not run until the file has
  been saved."
                  (unless (flycheck-has-current-errors-p 'error)
                    ad-do-it))

                (require 'flycheck-hdevtools)))

#+END_SRC
** Documentations

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (dolist (hook '(haskell-mode-hook inferior-haskell-mode-hook haskell-interactive-mode-hook))
    (add-hook hook 'turn-on-haskell-doc-mode)
    (add-hook hook (lambda () (subword-mode +1)))
    (add-hook hook (lambda () (eldoc-mode 1))))
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)

  (add-hook 'haskell-interactive-mode-hook 'sanityinc/no-trailing-whitespace)

#+END_SRC

** Interaction

Require diminish.el

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (require-package 'diminish)
  (require 'diminish)
  (after-load 'haskell
    (diminish 'interactive-haskell-mode " IntHS"))

  (add-auto-mode 'haskell-mode "\\.ghci\\'")

  (when (maybe-require-package 'ghci-completion)
    (add-hook 'inferior-haskell-mode-hook 'turn-on-ghci-completion))

#+END_SRC

** Indentation

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (require-package 'hi2)
  (add-hook 'haskell-mode-hook 'turn-on-hi2)

#+END_SRC

** Source Help

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (add-hook 'haskell-mode-hook 'haskell-auto-insert-module-template)

  (setq-default haskell-stylish-on-save t)

  (maybe-require-package 'hayoo)
  (after-load 'haskell-mode
    (define-key haskell-mode-map (kbd "C-c h") 'hoogle)
    (define-key haskell-mode-map (kbd "C-o") 'open-line))


  (after-load 'page-break-lines
    (push 'haskell-mode page-break-lines-modes))

#+END_SRC

** Compilation Mode Support

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  ;; Make compilation-mode understand "at blah.hs:11:34-50" lines output by GHC
  (after-load 'compile
    (let ((alias 'ghc-at-regexp))
      (add-to-list
       'compilation-error-regexp-alist-alist
       (list alias " at \\(.*\\.\\(?:l?[gh]hs\\|hi\\)\\):\\([0-9]+\\):\\([0-9]+\\)-[0-9]+$" 1 2 3 0 1))
      (add-to-list
       'compilation-error-regexp-alist alias)))

#+END_SRC

* Ruby

| Key  | Function            |
|------+---------------------|
| S-F7 | compile this buffer |
| F7   | compile this test   |
| F6   | recompile           |

** Setup
#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  ;;; Basic ruby setup
  (require-package 'ruby-mode)
  (require-package 'ruby-hash-syntax)
#+END_SRC

** Filetypes

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (add-auto-mode 'ruby-mode
                 "Rakefile\\'" "\\.rake\\'" "\\.rxml\\'"
                 "\\.rjs\\'" "\\.irbrc\\'" "\\.pryrc\\'" "\\.builder\\'" "\\.ru\\'"
                 "\\.gemspec\\'" "Gemfile\\'" "Kirkfile\\'")
#+END_SRC

** Fixup Prog Mode Convention
#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (setq ruby-use-encoding-map nil)

  (after-load 'ruby-mode
    (define-key ruby-mode-map (kbd "TAB") 'indent-for-tab-command)

    ;; Stupidly the non-bundled ruby-mode isn't a derived mode of
    ;; prog-mode: we run the latter's hooks anyway in that case.
    (add-hook 'ruby-mode-hook
              (lambda ()
                (unless (derived-mode-p 'prog-mode)
                  (run-hooks 'prog-mode-hook)))))

  (add-hook 'ruby-mode-hook 'subword-mode)

  ;; TODO: hippie-expand ignoring : for names in ruby-mode
#+END_SRC

** Inferior ruby
#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (require-package 'inf-ruby)
#+END_SRC

** Ruby compilation
#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  ;;; Ruby compilation
  (require-package 'ruby-compilation)

  (after-load 'ruby-mode
    (let ((m ruby-mode-map))
      (define-key m [S-f7] 'ruby-compilation-this-buffer)
      (define-key m [f7] 'ruby-compilation-this-test)
      (define-key m [f6] 'recompile)))
#+END_SRC

** Site-packages Support
#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  ;;; Robe
  (require-package 'robe)
  (after-load 'ruby-mode
              (add-hook 'ruby-mode-hook 'robe-mode))

  ;;; ri support
  (require-package 'yari)
  (defalias 'ri 'yari)
#+END_SRC


*** YAML
#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (require-package 'yaml-mode)
#+END_SRC


*** ERB
#+header: :tangle no
#+BEGIN_SRC emacs-lisp
  (require-package 'mmm-mode)
  (defun sanityinc/ensure-mmm-erb-loaded ()
    (require 'mmm-erb))

  (require 'derived)

  (defun sanityinc/set-up-mode-for-erb (mode)
    (add-hook (derived-mode-hook-name mode) 'sanityinc/ensure-mmm-erb-loaded)
    (mmm-add-mode-ext-class mode "\\.erb\\'" 'erb))

  (let ((html-erb-modes '(html-mode html-erb-mode nxml-mode)))
    (dolist (mode html-erb-modes)
      (sanityinc/set-up-mode-for-erb mode)
      (mmm-add-mode-ext-class mode "\\.r?html\\(\\.erb\\)?\\'" 'html-js)
      (mmm-add-mode-ext-class mode "\\.r?html\\(\\.erb\\)?\\'" 'html-css)))

  (mapc 'sanityinc/set-up-mode-for-erb
        '(coffee-mode js-mode js2-mode js3-mode markdown-mode textile-mode))

  (mmm-add-mode-ext-class 'html-erb-mode "\\.jst\\.ejs\\'" 'ejs)

  (add-auto-mode 'html-erb-mode "\\.rhtml\\'" "\\.html\\.erb\\'")
  (add-to-list 'auto-mode-alist '("\\.jst\\.ejs\\'"  . html-erb-mode))
  (mmm-add-mode-ext-class 'yaml-mode "\\.yaml\\'" 'erb)

  (dolist (mode (list 'js-mode 'js2-mode 'js3-mode))
    (mmm-add-mode-ext-class mode "\\.js\\.erb\\'" 'erb))


  ;;----------------------------------------------------------------------------
  ;; Ruby - my convention for heredocs containing SQL
  ;;----------------------------------------------------------------------------

  ;; Needs to run after rinari to avoid clobbering font-lock-keywords?

  ;; (require-package 'mmm-mode)
  ;; (eval-after-load 'mmm-mode
  ;;   '(progn
  ;;      (mmm-add-classes
  ;;       '((ruby-heredoc-sql
  ;;          :submode sql-mode
  ;;          :front "<<-?[\'\"]?\\(end_sql\\)[\'\"]?"
  ;;          :save-matches 1
  ;;          :front-offset (end-of-line 1)
  ;;          :back "^[ \t]*~1$"
  ;;          :delimiter-mode nil)))
  ;;      (mmm-add-mode-ext-class 'ruby-mode "\\.rb\\'" 'ruby-heredoc-sql)))

  ;(add-to-list 'mmm-set-file-name-for-modes 'ruby-mode)
#+END_SRC
