#+TITLE: Version Control System

* git

| Key       | Funnction                      | Denote                            |
|-----------+--------------------------------+-----------------------------------|
| M-F12     | magit status                   |                                   |
| C-u M-F12 | magit status on known projects | customize `magit-repo-dirs' first |
| C-M-<up>  | magit goto parent section      |                                   |
| C-x v f   | vc git grep                    |                                   |
| C-x v p   | git messenger                  |                                   |

** Setup
#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
;; TODO: link commits from vc-log to magit-show-commit
;; TODO: smerge-mode
(require-package 'magit)
(require-package 'git-blame)
;(require-package 'git-commit-mode)
;(require-package 'git-rebase-mode)
(require-package 'gitignore-mode)
(require-package 'gitconfig-mode)
(require-package 'git-messenger) ;; Though see also vc-annotate's "n" & "p" bindings
(require-package 'git-timemachine)
(require-package 'git-gutter+)

(global-git-gutter+-mode t)

;(add-to-list 'evil-emacs-state-modes 'git-rebase-mode)
;(add-to-list 'evil-insert-state-modes 'git-commit-mode)
;(add-to-list 'evil-insert-state-modes 'git-gutter+-commit-mode)
#+END_SRC

** magit settings

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
(setq-default
 magit-save-some-buffers nil
 magit-process-popup-time 10
 magit-diff-refine-hunk t
)

;; Hint: customize `magit-repo-dirs' so that you can use C-u M-F12 to
;; quickly open magit on any one of your projects.
(global-set-key [(meta f12)] 'magit-status)

(after-load 'magit
  (define-key magit-status-mode-map (kbd "C-M-<up>") 'magit-goto-parent-section))

(require-package 'fullframe)
(after-load 'magit
  (fullframe magit-status magit-mode-quit-window))

(add-hook 'git-commit-mode-hook 'goto-address-mode)
(after-load 'session
  (add-to-list 'session-mode-disable-list 'git-commit-mode))

#+END_SRC

** git-wip

#+header: :tangle no
#+BEGIN_SRC emacs-lisp
;;; When we start working on git-backed files, use git-wip if available

(after-load 'magit
  (global-magit-wip-save-mode)
  (diminish 'magit-wip-save-mode))

(after-load 'magit
  (diminish 'magit-auto-revert-mode))
#+END_SRC

** Mac 

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
(when *is-a-mac*
  (after-load 'magit
    (add-hook 'magit-mode-hook (lambda () (local-unset-key [(meta h)])))))
#+END_SRC

** vc-git-grep

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
;; Convenient binding for vc-git-grep
(global-set-key (kbd "C-x v f") 'vc-git-grep)
#+END_SRC

** SVN

#+header: :tangle no
#+BEGIN_SRC emacs-lisp
;;; git-svn support

(require-package 'magit-svn)
(autoload 'magit-svn-enabled "magit-svn")
(defun sanityinc/maybe-enable-magit-svn-mode ()
  (when (magit-svn-enabled)
    (magit-svn-mode)))
(add-hook 'magit-status-mode-hook #'sanityinc/maybe-enable-magit-svn-mode)

(after-load 'compile
  (dolist (defn (list '(git-svn-updated "^\t[A-Z]\t\\(.*\\)$" 1 nil nil 0 1)
                      '(git-svn-needs-update "^\\(.*\\): needs update$" 1 nil nil 2 1)))
    (add-to-list 'compilation-error-regexp-alist-alist defn)
    (add-to-list 'compilation-error-regexp-alist (car defn))))

(defvar git-svn--available-commands nil "Cached list of git svn subcommands")
(defun git-svn--available-commands ()
  (or git-svn--available-commands
      (setq git-svn--available-commands
            (sanityinc/string-all-matches
             "^  \\([a-z\\-]+\\) +"
             (shell-command-to-string "git svn help") 1))))

(defun git-svn (dir command)
  "Run a git svn subcommand in DIR."
  (interactive (list (read-directory-name "Directory: ")
                     (completing-read "git-svn command: " (git-svn--available-commands) nil t nil nil (git-svn--available-commands))))
  (let* ((default-directory (vc-git-root dir))
         (compilation-buffer-name-function (lambda (major-mode-name) "*git-svn*")))
    (compile (concat "git svn " command))))
#+END_SRC

** git messenger
#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
(require-package 'git-messenger)
(global-set-key (kbd "C-x v p") #'git-messenger:popup-message)
#+END_SRC

* github
#+header: :tangle yes
#+BEGIN_SRC emacs-lisp
  (require-package 'yagist)
  (require-package 'github-browse-file)
  (require-package 'bug-reference-github)
  (add-hook 'prog-mode-hook 'bug-reference-prog-mode)

  (maybe-require-package 'github-clone)
  (maybe-require-package 'magit-gh-pulls)

#+END_SRC
